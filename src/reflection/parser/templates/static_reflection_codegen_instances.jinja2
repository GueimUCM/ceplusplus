# Codegen instances

{% import 'static_reflection_utility.jinja2' as utility %}

{% macro field(class, node) -%}
::cpp::static_reflection::codegen::Field<
    {{utility.member_type(class, node)}}, {{utility.member_pointer(class, node)}}
>
{%- endmacro %}

{% macro method(class, node) -%}
::cpp::static_reflection::codegen::Function<
    {{utility.member_type(class, node)}}, {{utility.untyped_member_pointer(class, node)}}
>
{%- endmacro %}

{% macro class(node) -%}
::cpp::static_reflection::codegen::Class<
    {{node.fullname}}
>
{%- endmacro %}

{% macro namespace(node) -%}
::cpp::static_reflection::codegen::Namespace<
    {{node.fullname}}
>
{%- endmacro %}

{% macro enum(node) -%}
::cpp::static_reflection::codegen::Enum<
    {{node.fullname}}
>
{%- endmacro %}

{% macro overloaded_method(class, method_family) -%}
::cpp::static_reflection::codegen::OverloadedFunction<
{% for method_ in method_family %}
    {{method(class, method_) | indent(4)}}
{% if not loop.last %}
    ,
{% endif %}
{% endfor %}
>
{%- endmacro %}

{% macro binded_method(class, method_family) -%}
::cpp::static_reflection::codegen::BindedMethod<
    {{overloaded_method(class, method_family) | indent(4)}}
>
{%- endmacro %}

{% macro const_binded_method(class, method_family) -%}
::cpp::static_reflection::codegen::ConstBindedMethod<
    {{overloaded_method(class, method_family) | indent(4)}}
>
{%- endmacro %}
