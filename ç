#ifndef SIPLASPLAS_REFLECTION_STATIC_ENUM_HPP
#define SIPLASPLAS_REFLECTION_STATIC_ENUM_HPP

#include <siplasplas/utility/meta.hpp>
#include <string>

namespace cpp
{
namespace static_reflection
{
namespace meta
{

template<
    typename SourceInfo,
    typename EnumType,
    typename Constants,
    typename ConstantsNames
>
class Enum;

template<
    typename SourceInfo_,
    typename EnumType,
    EnumType... Constants,
    typename... ConstantsNames
>
class Enum<
    SourceInfo_,
    EnumType,
    ::cpp::meta::list<std::integral_constant<EnumType, Constants>...>,
    ::cpp::meta::list<ConstantsNames...>
>
{
public:
    using type = EnumType;
    using SourceInfo = SourceInfo_;
    using names_array_t  = const char*[sizeof...(ConstantsNames)];
    using values_array_t = const EnumType[sizeof...(Constants)];

    constexpr Enum() = default;

    static constexpr const names_array_t& names()
    {
        return _namesArray;
    }

    static constexpr const values_array_t& values()
    {
        return ::cpp::meta::PackToArray<EnumType, Constants...>::get();
    }

    static constexpr EnumType value(std::size_t i)
    {
        return values()[i];
    }

    static constexpr const char* name(std::size_t i)
    {
        return names()[i];
    }

    static constexpr const char* toString(const EnumType value)
    {
        return _toString(value, 0);
    }

    static EnumType fromString(const char* name)
    {
        return _fromString(name, 0);
    }

private:
    static constexpr const char* _namesArray[] = {::cpp::meta::StringToArray<ConstantsNames>::c_str()...};
    static constexpr bool streq(const char* lhs, const char* rhs)
    {
        return lhs == rhs or ((*rhs and *lhs) ? (*lhs == *rhs) and streq(lhs + 1, rhs + 1) : (not *lhs and not *rhs));
    }

    static constexpr const char* _toString(const EnumType value, std::size_t i)
    {
        return (i < sizeof...(Constants)) ?
            ((value == Enum::value(i)) ? Enum::name(i) : _toString(value, i + 1))
        :
            throw std::domain_error{"Unknown enum value " + std::to_string(value)};
    }

    static constexpr EnumType _fromString(const char* name, std::size_t i)
    {
        return (i < sizeof...(ConstantsNames)) ?
            (streq(name, Enum::name(i)) ? Enum::value(i) : _fromString(name, i + 1))
        :
            throw std::domain_error{"Unknown enum name " + std::string(name)}
    }
};

template<typename SourceInfo, typename EnumType, typename Constants, typename ConstantsNames>
constexpr const char* Enum<SourceInfo, EnumType, Constants, ConstantsNames>::_namesArray[ConstantsNames::size()];

template<
    typename SourceInfo,
    typename EnumType,
    EnumType... Constants,
    typename... ConstantsNames
>
const char* Enum<
    SourceInfo,
    EnumType,
    ::cpp::meta::list<std::integral_constant<EnumType, Constants>...>,
    ::cpp::meta::list<ConstantsNames...>
>::_names[] = {
    ::cpp::meta::StringToArray<ConstantsNames>::c_str()...
};

template<
    typename SourceInfo,
    typename EnumType,
    EnumType... Constants,
    typename... ConstantsNames
>
constexpr EnumType Enum<
    SourceInfo,
    EnumType,
    ::cpp::meta::list<std::integral_constant<EnumType, Constants>...>,
    ::cpp::meta::list<ConstantsNames...>
>::_values[];


} // namespace meta

namespace codegen
{

template<typename EnumType>
class Enum : public static_reflection::meta::Enum<
    static_reflection::meta::EmptySourceInfo<Enum<EnumType>>,
    EnumType,
    ::cpp::meta::list<
        std::integral_constant<EnumType, static_cast<EnumType>(0)>
    >,
    ::cpp::meta::list<
        ::cpp::meta::string<>
    >
>
{};

}

template<typename EnumType>
class Enum : public codegen::Enum<EnumType>
{};

} // namespace static_reflection
} // namespace cpp
#endif // SIPLASPLAS_REFLECTION_STATIC_ENUM_HPP
